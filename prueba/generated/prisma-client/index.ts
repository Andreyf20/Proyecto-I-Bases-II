// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  producto: (where?: ProductoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  producto: (where: ProductoWhereUniqueInput) => ProductoNullablePromise;
  productoes: (args?: {
    where?: ProductoWhereInput;
    orderBy?: ProductoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Producto>;
  productoesConnection: (args?: {
    where?: ProductoWhereInput;
    orderBy?: ProductoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createProducto: (data: ProductoCreateInput) => ProductoPromise;
  updateProducto: (args: {
    data: ProductoUpdateInput;
    where: ProductoWhereUniqueInput;
  }) => ProductoPromise;
  updateManyProductoes: (args: {
    data: ProductoUpdateManyMutationInput;
    where?: ProductoWhereInput;
  }) => BatchPayloadPromise;
  upsertProducto: (args: {
    where: ProductoWhereUniqueInput;
    create: ProductoCreateInput;
    update: ProductoUpdateInput;
  }) => ProductoPromise;
  deleteProducto: (where: ProductoWhereUniqueInput) => ProductoPromise;
  deleteManyProductoes: (where?: ProductoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  producto: (
    where?: ProductoSubscriptionWhereInput
  ) => ProductoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProductoOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "cantidad_ASC"
  | "cantidad_DESC"
  | "codigo_ASC"
  | "codigo_DESC"
  | "enabled_ASC"
  | "enabled_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "precio_ASC"
  | "precio_DESC"
  | "provincia_ASC"
  | "provincia_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ProductoWhereUniqueInput = AtLeastOne<{
  _id: Maybe<ID_Input>;
}>;

export interface ProductoWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  cantidad?: Maybe<Float>;
  cantidad_not?: Maybe<Float>;
  cantidad_in?: Maybe<Float[] | Float>;
  cantidad_not_in?: Maybe<Float[] | Float>;
  cantidad_lt?: Maybe<Float>;
  cantidad_lte?: Maybe<Float>;
  cantidad_gt?: Maybe<Float>;
  cantidad_gte?: Maybe<Float>;
  codigo?: Maybe<Float>;
  codigo_not?: Maybe<Float>;
  codigo_in?: Maybe<Float[] | Float>;
  codigo_not_in?: Maybe<Float[] | Float>;
  codigo_lt?: Maybe<Float>;
  codigo_lte?: Maybe<Float>;
  codigo_gt?: Maybe<Float>;
  codigo_gte?: Maybe<Float>;
  enabled?: Maybe<Float>;
  enabled_not?: Maybe<Float>;
  enabled_in?: Maybe<Float[] | Float>;
  enabled_not_in?: Maybe<Float[] | Float>;
  enabled_lt?: Maybe<Float>;
  enabled_lte?: Maybe<Float>;
  enabled_gt?: Maybe<Float>;
  enabled_gte?: Maybe<Float>;
  nombre?: Maybe<String>;
  nombre_not?: Maybe<String>;
  nombre_in?: Maybe<String[] | String>;
  nombre_not_in?: Maybe<String[] | String>;
  nombre_lt?: Maybe<String>;
  nombre_lte?: Maybe<String>;
  nombre_gt?: Maybe<String>;
  nombre_gte?: Maybe<String>;
  nombre_contains?: Maybe<String>;
  nombre_not_contains?: Maybe<String>;
  nombre_starts_with?: Maybe<String>;
  nombre_not_starts_with?: Maybe<String>;
  nombre_ends_with?: Maybe<String>;
  nombre_not_ends_with?: Maybe<String>;
  precio?: Maybe<Float>;
  precio_not?: Maybe<Float>;
  precio_in?: Maybe<Float[] | Float>;
  precio_not_in?: Maybe<Float[] | Float>;
  precio_lt?: Maybe<Float>;
  precio_lte?: Maybe<Float>;
  precio_gt?: Maybe<Float>;
  precio_gte?: Maybe<Float>;
  provincia?: Maybe<Float>;
  provincia_not?: Maybe<Float>;
  provincia_in?: Maybe<Float[] | Float>;
  provincia_not_in?: Maybe<Float[] | Float>;
  provincia_lt?: Maybe<Float>;
  provincia_lte?: Maybe<Float>;
  provincia_gt?: Maybe<Float>;
  provincia_gte?: Maybe<Float>;
  AND?: Maybe<ProductoWhereInput[] | ProductoWhereInput>;
}

export interface ProductoCreateInput {
  _id?: Maybe<ID_Input>;
  cantidad?: Maybe<Float>;
  codigo?: Maybe<Float>;
  enabled?: Maybe<Float>;
  nombre?: Maybe<String>;
  precio?: Maybe<Float>;
  provincia?: Maybe<Float>;
}

export interface ProductoUpdateInput {
  cantidad?: Maybe<Float>;
  codigo?: Maybe<Float>;
  enabled?: Maybe<Float>;
  nombre?: Maybe<String>;
  precio?: Maybe<Float>;
  provincia?: Maybe<Float>;
}

export interface ProductoUpdateManyMutationInput {
  cantidad?: Maybe<Float>;
  codigo?: Maybe<Float>;
  enabled?: Maybe<Float>;
  nombre?: Maybe<String>;
  precio?: Maybe<Float>;
  provincia?: Maybe<Float>;
}

export interface ProductoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductoWhereInput>;
  AND?: Maybe<
    ProductoSubscriptionWhereInput[] | ProductoSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Producto {
  _id: ID_Output;
  cantidad?: Float;
  codigo?: Float;
  enabled?: Float;
  nombre?: String;
  precio?: Float;
  provincia?: Float;
}

export interface ProductoPromise extends Promise<Producto>, Fragmentable {
  _id: () => Promise<ID_Output>;
  cantidad: () => Promise<Float>;
  codigo: () => Promise<Float>;
  enabled: () => Promise<Float>;
  nombre: () => Promise<String>;
  precio: () => Promise<Float>;
  provincia: () => Promise<Float>;
}

export interface ProductoSubscription
  extends Promise<AsyncIterator<Producto>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  cantidad: () => Promise<AsyncIterator<Float>>;
  codigo: () => Promise<AsyncIterator<Float>>;
  enabled: () => Promise<AsyncIterator<Float>>;
  nombre: () => Promise<AsyncIterator<String>>;
  precio: () => Promise<AsyncIterator<Float>>;
  provincia: () => Promise<AsyncIterator<Float>>;
}

export interface ProductoNullablePromise
  extends Promise<Producto | null>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  cantidad: () => Promise<Float>;
  codigo: () => Promise<Float>;
  enabled: () => Promise<Float>;
  nombre: () => Promise<String>;
  precio: () => Promise<Float>;
  provincia: () => Promise<Float>;
}

export interface ProductoConnection {
  pageInfo: PageInfo;
  edges: ProductoEdge[];
}

export interface ProductoConnectionPromise
  extends Promise<ProductoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductoEdge>>() => T;
  aggregate: <T = AggregateProductoPromise>() => T;
}

export interface ProductoConnectionSubscription
  extends Promise<AsyncIterator<ProductoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductoSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductoEdge {
  node: Producto;
  cursor: String;
}

export interface ProductoEdgePromise
  extends Promise<ProductoEdge>,
    Fragmentable {
  node: <T = ProductoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductoEdgeSubscription
  extends Promise<AsyncIterator<ProductoEdge>>,
    Fragmentable {
  node: <T = ProductoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProducto {
  count: Int;
}

export interface AggregateProductoPromise
  extends Promise<AggregateProducto>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductoSubscription
  extends Promise<AsyncIterator<AggregateProducto>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ProductoSubscriptionPayload {
  mutation: MutationType;
  node: Producto;
  updatedFields: String[];
  previousValues: ProductoPreviousValues;
}

export interface ProductoSubscriptionPayloadPromise
  extends Promise<ProductoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductoPreviousValuesPromise>() => T;
}

export interface ProductoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductoPreviousValuesSubscription>() => T;
}

export interface ProductoPreviousValues {
  _id: ID_Output;
  cantidad?: Float;
  codigo?: Float;
  enabled?: Float;
  nombre?: String;
  precio?: Float;
  provincia?: Float;
}

export interface ProductoPreviousValuesPromise
  extends Promise<ProductoPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  cantidad: () => Promise<Float>;
  codigo: () => Promise<Float>;
  enabled: () => Promise<Float>;
  nombre: () => Promise<String>;
  precio: () => Promise<Float>;
  provincia: () => Promise<Float>;
}

export interface ProductoPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductoPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  cantidad: () => Promise<AsyncIterator<Float>>;
  codigo: () => Promise<AsyncIterator<Float>>;
  enabled: () => Promise<AsyncIterator<Float>>;
  nombre: () => Promise<AsyncIterator<String>>;
  precio: () => Promise<AsyncIterator<Float>>;
  provincia: () => Promise<AsyncIterator<Float>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Producto",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/Productos/`
});
export const prisma = new Prisma();
