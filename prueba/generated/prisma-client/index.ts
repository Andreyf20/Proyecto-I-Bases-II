// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  productos: (where?: productosWhereInput) => Promise<boolean>;
  usuarios: (where?: usuariosWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  productos: (where: productosWhereUniqueInput) => productosNullablePromise;
  productoses: (args?: {
    where?: productosWhereInput;
    orderBy?: productosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<productos>;
  productosesConnection: (args?: {
    where?: productosWhereInput;
    orderBy?: productosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => productosConnectionPromise;
  usuarios: (where: usuariosWhereUniqueInput) => usuariosNullablePromise;
  usuarioses: (args?: {
    where?: usuariosWhereInput;
    orderBy?: usuariosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<usuarios>;
  usuariosesConnection: (args?: {
    where?: usuariosWhereInput;
    orderBy?: usuariosOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => usuariosConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createproductos: (data: productosCreateInput) => productosPromise;
  updateproductos: (args: {
    data: productosUpdateInput;
    where: productosWhereUniqueInput;
  }) => productosPromise;
  updateManyproductoses: (args: {
    data: productosUpdateManyMutationInput;
    where?: productosWhereInput;
  }) => BatchPayloadPromise;
  upsertproductos: (args: {
    where: productosWhereUniqueInput;
    create: productosCreateInput;
    update: productosUpdateInput;
  }) => productosPromise;
  deleteproductos: (where: productosWhereUniqueInput) => productosPromise;
  deleteManyproductoses: (where?: productosWhereInput) => BatchPayloadPromise;
  createusuarios: (data: usuariosCreateInput) => usuariosPromise;
  updateusuarios: (args: {
    data: usuariosUpdateInput;
    where: usuariosWhereUniqueInput;
  }) => usuariosPromise;
  updateManyusuarioses: (args: {
    data: usuariosUpdateManyMutationInput;
    where?: usuariosWhereInput;
  }) => BatchPayloadPromise;
  upsertusuarios: (args: {
    where: usuariosWhereUniqueInput;
    create: usuariosCreateInput;
    update: usuariosUpdateInput;
  }) => usuariosPromise;
  deleteusuarios: (where: usuariosWhereUniqueInput) => usuariosPromise;
  deleteManyusuarioses: (where?: usuariosWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  productos: (
    where?: productosSubscriptionWhereInput
  ) => productosSubscriptionPayloadSubscription;
  usuarios: (
    where?: usuariosSubscriptionWhereInput
  ) => usuariosSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type productosOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "cantidad_ASC"
  | "cantidad_DESC"
  | "codigo_ASC"
  | "codigo_DESC"
  | "enabled_ASC"
  | "enabled_DESC"
  | "nombre_ASC"
  | "nombre_DESC"
  | "precio_ASC"
  | "precio_DESC"
  | "productor_ASC"
  | "productor_DESC"
  | "provincia_ASC"
  | "provincia_DESC";

export type usuariosOrderByInput =
  | "_id_ASC"
  | "_id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type productosWhereUniqueInput = AtLeastOne<{
  _id: Maybe<ID_Input>;
}>;

export interface productosWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  cantidad?: Maybe<Float>;
  cantidad_not?: Maybe<Float>;
  cantidad_in?: Maybe<Float[] | Float>;
  cantidad_not_in?: Maybe<Float[] | Float>;
  cantidad_lt?: Maybe<Float>;
  cantidad_lte?: Maybe<Float>;
  cantidad_gt?: Maybe<Float>;
  cantidad_gte?: Maybe<Float>;
  codigo?: Maybe<Float>;
  codigo_not?: Maybe<Float>;
  codigo_in?: Maybe<Float[] | Float>;
  codigo_not_in?: Maybe<Float[] | Float>;
  codigo_lt?: Maybe<Float>;
  codigo_lte?: Maybe<Float>;
  codigo_gt?: Maybe<Float>;
  codigo_gte?: Maybe<Float>;
  enabled?: Maybe<Float>;
  enabled_not?: Maybe<Float>;
  enabled_in?: Maybe<Float[] | Float>;
  enabled_not_in?: Maybe<Float[] | Float>;
  enabled_lt?: Maybe<Float>;
  enabled_lte?: Maybe<Float>;
  enabled_gt?: Maybe<Float>;
  enabled_gte?: Maybe<Float>;
  nombre?: Maybe<String>;
  nombre_not?: Maybe<String>;
  nombre_in?: Maybe<String[] | String>;
  nombre_not_in?: Maybe<String[] | String>;
  nombre_lt?: Maybe<String>;
  nombre_lte?: Maybe<String>;
  nombre_gt?: Maybe<String>;
  nombre_gte?: Maybe<String>;
  nombre_contains?: Maybe<String>;
  nombre_not_contains?: Maybe<String>;
  nombre_starts_with?: Maybe<String>;
  nombre_not_starts_with?: Maybe<String>;
  nombre_ends_with?: Maybe<String>;
  nombre_not_ends_with?: Maybe<String>;
  precio?: Maybe<Float>;
  precio_not?: Maybe<Float>;
  precio_in?: Maybe<Float[] | Float>;
  precio_not_in?: Maybe<Float[] | Float>;
  precio_lt?: Maybe<Float>;
  precio_lte?: Maybe<Float>;
  precio_gt?: Maybe<Float>;
  precio_gte?: Maybe<Float>;
  productor?: Maybe<String>;
  productor_not?: Maybe<String>;
  productor_in?: Maybe<String[] | String>;
  productor_not_in?: Maybe<String[] | String>;
  productor_lt?: Maybe<String>;
  productor_lte?: Maybe<String>;
  productor_gt?: Maybe<String>;
  productor_gte?: Maybe<String>;
  productor_contains?: Maybe<String>;
  productor_not_contains?: Maybe<String>;
  productor_starts_with?: Maybe<String>;
  productor_not_starts_with?: Maybe<String>;
  productor_ends_with?: Maybe<String>;
  productor_not_ends_with?: Maybe<String>;
  provincia?: Maybe<Float>;
  provincia_not?: Maybe<Float>;
  provincia_in?: Maybe<Float[] | Float>;
  provincia_not_in?: Maybe<Float[] | Float>;
  provincia_lt?: Maybe<Float>;
  provincia_lte?: Maybe<Float>;
  provincia_gt?: Maybe<Float>;
  provincia_gte?: Maybe<Float>;
  AND?: Maybe<productosWhereInput[] | productosWhereInput>;
}

export type usuariosWhereUniqueInput = AtLeastOne<{
  _id: Maybe<ID_Input>;
}>;

export interface usuariosWhereInput {
  _id?: Maybe<ID_Input>;
  _id_not?: Maybe<ID_Input>;
  _id_in?: Maybe<ID_Input[] | ID_Input>;
  _id_not_in?: Maybe<ID_Input[] | ID_Input>;
  _id_lt?: Maybe<ID_Input>;
  _id_lte?: Maybe<ID_Input>;
  _id_gt?: Maybe<ID_Input>;
  _id_gte?: Maybe<ID_Input>;
  _id_contains?: Maybe<ID_Input>;
  _id_not_contains?: Maybe<ID_Input>;
  _id_starts_with?: Maybe<ID_Input>;
  _id_not_starts_with?: Maybe<ID_Input>;
  _id_ends_with?: Maybe<ID_Input>;
  _id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<usuariosWhereInput[] | usuariosWhereInput>;
}

export interface productosCreateInput {
  _id?: Maybe<ID_Input>;
  cantidad?: Maybe<Float>;
  codigo?: Maybe<Float>;
  enabled?: Maybe<Float>;
  nombre?: Maybe<String>;
  precio?: Maybe<Float>;
  productor?: Maybe<String>;
  provincia?: Maybe<Float>;
}

export interface productosUpdateInput {
  cantidad?: Maybe<Float>;
  codigo?: Maybe<Float>;
  enabled?: Maybe<Float>;
  nombre?: Maybe<String>;
  precio?: Maybe<Float>;
  productor?: Maybe<String>;
  provincia?: Maybe<Float>;
}

export interface productosUpdateManyMutationInput {
  cantidad?: Maybe<Float>;
  codigo?: Maybe<Float>;
  enabled?: Maybe<Float>;
  nombre?: Maybe<String>;
  precio?: Maybe<Float>;
  productor?: Maybe<String>;
  provincia?: Maybe<Float>;
}

export interface usuariosCreateInput {
  _id?: Maybe<ID_Input>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  tokens?: Maybe<usuariosCreatetokensInput>;
}

export interface usuariosCreatetokensInput {
  set?: Maybe<String[] | String>;
}

export interface usuariosUpdateInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  tokens?: Maybe<usuariosUpdatetokensInput>;
}

export interface usuariosUpdatetokensInput {
  set?: Maybe<String[] | String>;
}

export interface usuariosUpdateManyMutationInput {
  email?: Maybe<String>;
  password?: Maybe<String>;
  tokens?: Maybe<usuariosUpdatetokensInput>;
}

export interface productosSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<productosWhereInput>;
  AND?: Maybe<
    productosSubscriptionWhereInput[] | productosSubscriptionWhereInput
  >;
}

export interface usuariosSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<usuariosWhereInput>;
  AND?: Maybe<
    usuariosSubscriptionWhereInput[] | usuariosSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface productos {
  _id: ID_Output;
  cantidad?: Float;
  codigo?: Float;
  enabled?: Float;
  nombre?: String;
  precio?: Float;
  productor?: String;
  provincia?: Float;
}

export interface productosPromise extends Promise<productos>, Fragmentable {
  _id: () => Promise<ID_Output>;
  cantidad: () => Promise<Float>;
  codigo: () => Promise<Float>;
  enabled: () => Promise<Float>;
  nombre: () => Promise<String>;
  precio: () => Promise<Float>;
  productor: () => Promise<String>;
  provincia: () => Promise<Float>;
}

export interface productosSubscription
  extends Promise<AsyncIterator<productos>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  cantidad: () => Promise<AsyncIterator<Float>>;
  codigo: () => Promise<AsyncIterator<Float>>;
  enabled: () => Promise<AsyncIterator<Float>>;
  nombre: () => Promise<AsyncIterator<String>>;
  precio: () => Promise<AsyncIterator<Float>>;
  productor: () => Promise<AsyncIterator<String>>;
  provincia: () => Promise<AsyncIterator<Float>>;
}

export interface productosNullablePromise
  extends Promise<productos | null>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  cantidad: () => Promise<Float>;
  codigo: () => Promise<Float>;
  enabled: () => Promise<Float>;
  nombre: () => Promise<String>;
  precio: () => Promise<Float>;
  productor: () => Promise<String>;
  provincia: () => Promise<Float>;
}

export interface productosConnection {
  pageInfo: PageInfo;
  edges: productosEdge[];
}

export interface productosConnectionPromise
  extends Promise<productosConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<productosEdge>>() => T;
  aggregate: <T = AggregateproductosPromise>() => T;
}

export interface productosConnectionSubscription
  extends Promise<AsyncIterator<productosConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<productosEdgeSubscription>>>() => T;
  aggregate: <T = AggregateproductosSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface productosEdge {
  node: productos;
  cursor: String;
}

export interface productosEdgePromise
  extends Promise<productosEdge>,
    Fragmentable {
  node: <T = productosPromise>() => T;
  cursor: () => Promise<String>;
}

export interface productosEdgeSubscription
  extends Promise<AsyncIterator<productosEdge>>,
    Fragmentable {
  node: <T = productosSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregateproductos {
  count: Int;
}

export interface AggregateproductosPromise
  extends Promise<Aggregateproductos>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateproductosSubscription
  extends Promise<AsyncIterator<Aggregateproductos>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface usuarios {
  _id: ID_Output;
  email?: String;
  password?: String;
  tokens: String[];
}

export interface usuariosPromise extends Promise<usuarios>, Fragmentable {
  _id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tokens: () => Promise<String[]>;
}

export interface usuariosSubscription
  extends Promise<AsyncIterator<usuarios>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tokens: () => Promise<AsyncIterator<String[]>>;
}

export interface usuariosNullablePromise
  extends Promise<usuarios | null>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tokens: () => Promise<String[]>;
}

export interface usuariosConnection {
  pageInfo: PageInfo;
  edges: usuariosEdge[];
}

export interface usuariosConnectionPromise
  extends Promise<usuariosConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<usuariosEdge>>() => T;
  aggregate: <T = AggregateusuariosPromise>() => T;
}

export interface usuariosConnectionSubscription
  extends Promise<AsyncIterator<usuariosConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<usuariosEdgeSubscription>>>() => T;
  aggregate: <T = AggregateusuariosSubscription>() => T;
}

export interface usuariosEdge {
  node: usuarios;
  cursor: String;
}

export interface usuariosEdgePromise
  extends Promise<usuariosEdge>,
    Fragmentable {
  node: <T = usuariosPromise>() => T;
  cursor: () => Promise<String>;
}

export interface usuariosEdgeSubscription
  extends Promise<AsyncIterator<usuariosEdge>>,
    Fragmentable {
  node: <T = usuariosSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregateusuarios {
  count: Int;
}

export interface AggregateusuariosPromise
  extends Promise<Aggregateusuarios>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateusuariosSubscription
  extends Promise<AsyncIterator<Aggregateusuarios>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface productosSubscriptionPayload {
  mutation: MutationType;
  node: productos;
  updatedFields: String[];
  previousValues: productosPreviousValues;
}

export interface productosSubscriptionPayloadPromise
  extends Promise<productosSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = productosPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = productosPreviousValuesPromise>() => T;
}

export interface productosSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<productosSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = productosSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = productosPreviousValuesSubscription>() => T;
}

export interface productosPreviousValues {
  _id: ID_Output;
  cantidad?: Float;
  codigo?: Float;
  enabled?: Float;
  nombre?: String;
  precio?: Float;
  productor?: String;
  provincia?: Float;
}

export interface productosPreviousValuesPromise
  extends Promise<productosPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  cantidad: () => Promise<Float>;
  codigo: () => Promise<Float>;
  enabled: () => Promise<Float>;
  nombre: () => Promise<String>;
  precio: () => Promise<Float>;
  productor: () => Promise<String>;
  provincia: () => Promise<Float>;
}

export interface productosPreviousValuesSubscription
  extends Promise<AsyncIterator<productosPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  cantidad: () => Promise<AsyncIterator<Float>>;
  codigo: () => Promise<AsyncIterator<Float>>;
  enabled: () => Promise<AsyncIterator<Float>>;
  nombre: () => Promise<AsyncIterator<String>>;
  precio: () => Promise<AsyncIterator<Float>>;
  productor: () => Promise<AsyncIterator<String>>;
  provincia: () => Promise<AsyncIterator<Float>>;
}

export interface usuariosSubscriptionPayload {
  mutation: MutationType;
  node: usuarios;
  updatedFields: String[];
  previousValues: usuariosPreviousValues;
}

export interface usuariosSubscriptionPayloadPromise
  extends Promise<usuariosSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = usuariosPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = usuariosPreviousValuesPromise>() => T;
}

export interface usuariosSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<usuariosSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = usuariosSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = usuariosPreviousValuesSubscription>() => T;
}

export interface usuariosPreviousValues {
  _id: ID_Output;
  email?: String;
  password?: String;
  tokens: String[];
}

export interface usuariosPreviousValuesPromise
  extends Promise<usuariosPreviousValues>,
    Fragmentable {
  _id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tokens: () => Promise<String[]>;
}

export interface usuariosPreviousValuesSubscription
  extends Promise<AsyncIterator<usuariosPreviousValues>>,
    Fragmentable {
  _id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tokens: () => Promise<AsyncIterator<String[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "productos",
    embedded: false
  },
  {
    name: "usuarios",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466/`
});
export const prisma = new Prisma();
